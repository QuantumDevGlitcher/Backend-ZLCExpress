// ================================================================
// ESQUEMA PRISMA - Sistema de Usuarios ZLCExpress
// ================================================================
// Descripción: Esquema completo para PostgreSQL con ORM Prisma
// Fecha: 2025-07-26
// Versión: 1.0

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================================================
// MODELO PRINCIPAL: User
// ================================================================

model User {
  // Clave primaria
  id        Int      @id @default(autoincrement())

  // Credenciales de acceso
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)

  // Información de la empresa
  companyName      String @map("company_name") @db.VarChar(255)
  taxId            String @map("tax_id") @db.VarChar(50)
  operationCountry String @map("operation_country") @db.VarChar(100)
  industry         String @db.VarChar(100)

  // Contacto principal
  contactName     String @map("contact_name") @db.VarChar(255)
  contactPosition String @map("contact_position") @db.VarChar(100)
  contactPhone    String @map("contact_phone") @db.VarChar(20)

  // Dirección fiscal
  fiscalAddress String @map("fiscal_address") @db.Text
  country       String @db.VarChar(100)
  state         String @db.VarChar(100)
  city          String @db.VarChar(100)
  postalCode    String @map("postal_code") @db.VarChar(10)

  // Estado del usuario
  isVerified         Boolean            @default(false) @map("is_verified")
  verificationStatus VerificationStatus @default(PENDING) @map("verification_status")
  userType          UserType           @default(BUYER) @map("user_type")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  sessions UserSession[]
  authLogs AuthLog[]
  products Product[]
  orders   Order[]
  orderDetails OrderDetail[]
  cartItems CartItem[]
  shippingQuotes ShippingQuote[]
  
  // Relaciones de cotizaciones
  quotesAsBuyer    Quote[] @relation("QuoteBuyer")
  quotesAsSupplier Quote[] @relation("QuoteSupplier")
  quoteResponses   QuoteResponse[] @relation("QuoteResponseSupplier")
  quoteDocuments   QuoteDocument[] @relation("QuoteDocumentUploader")
  quoteComments    QuoteComment[] @relation("QuoteComments")
  paymentOrders    PaymentOrder[] @relation("PaymentOrderBuyer")

  // Índices
  @@index([email])
  @@index([verificationStatus])
  @@index([isVerified])
  @@index([userType])
  @@index([taxId])
  @@index([companyName])
  @@index([operationCountry])
  @@index([createdAt])
  @@map("users")
}

// ================================================================
// MODELO: UserSession (para JWT y control de sesiones)
// ================================================================

model UserSession {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  tokenHash  String   @map("token_hash") @db.VarChar(255)
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  lastUsedAt DateTime @default(now()) @updatedAt @map("last_used_at")
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  isActive   Boolean  @default(true) @map("is_active")

  // Relación
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Índices
  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([isActive])
  @@map("user_sessions")
}

// ================================================================
// MODELO: AuthLog (logs de auditoría)
// ================================================================

model AuthLog {
  id           Int         @id @default(autoincrement())
  userId       Int?        @map("user_id")
  action       AuthAction
  ipAddress    String?     @map("ip_address") @db.VarChar(45)
  userAgent    String?     @map("user_agent") @db.Text
  success      Boolean     @default(true)
  errorMessage String?     @map("error_message") @db.Text
  createdAt    DateTime    @default(now()) @map("created_at")

  // Relación (nullable para failed logins)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Índices
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([success])
  @@map("auth_logs")
}

// ================================================================
// MODELO: Category (categorías de productos)
// ================================================================

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.Text
  image       String?   @db.VarChar(255)
  isActive    Boolean   @default(true) @map("is_active")
  parentId    Int?      @map("parent_id")
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relaciones
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  products   Product[]

  // Índices
  @@index([name])
  @@index([isActive])
  @@index([parentId])
  @@index([sortOrder])
  @@map("categories")
}

// ================================================================
// MODELO: Product (productos/lotes de proveedores)
// ================================================================

model Product {
  id                 Int       @id @default(autoincrement())
  title              String    @db.VarChar(255)
  description        String?   @db.Text
  categoryId         Int       @map("category_id")
  supplierId         Int       @map("supplier_id")
  price              Decimal   @db.Decimal(10, 2)
  currency           String    @default("USD") @db.VarChar(3)
  minQuantity        Int       @map("min_quantity")
  maxQuantity        Int?      @map("max_quantity")
  unit               String    @db.VarChar(50)
  incoterm           String    @db.VarChar(20)
  originCountry      String    @map("origin_country") @db.VarChar(100)
  images             String[]  @db.VarChar(255)
  specifications     Json?
  isActive           Boolean   @default(true) @map("is_active")
  
  // Nuevos campos para compatibilidad con frontend
  containerType      String    @default("40GP") @map("container_type") @db.VarChar(10)
  unitsPerContainer  Int       @default(0) @map("units_per_container")
  moq                Int       @default(0) // Minimum Order Quantity
  unitPrice          Decimal   @default(0) @map("unit_price") @db.Decimal(10, 2)
  pricePerContainer  Decimal   @default(0) @map("price_per_container") @db.Decimal(12, 2)
  grossWeight        Int       @default(0) @map("gross_weight") // en kg
  netWeight          Int       @default(0) @map("net_weight") // en kg
  volume             Decimal   @default(0) @db.Decimal(8, 2) // en m³
  packagingType      String?   @map("packaging_type") @db.VarChar(255)
  stockContainers    Int       @default(0) @map("stock_containers")
  isNegotiable       Boolean   @default(false) @map("is_negotiable")
  allowsCustomOrders Boolean   @default(false) @map("allows_custom_orders")
  productionTime     Int       @default(0) @map("production_time") // días
  packagingTime      Int       @default(0) @map("packaging_time") // días
  totalViews         Int       @default(0) @map("total_views")
  totalInquiries     Int       @default(0) @map("total_inquiries")
  
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relaciones
  category     Category      @relation(fields: [categoryId], references: [id])
  supplier     User          @relation(fields: [supplierId], references: [id])
  orderDetails OrderDetail[]
  cartItems    CartItem[]
  quotes       Quote[]
  quoteItems   QuoteItem[]

  // Índices
  @@index([title])
  @@index([categoryId])
  @@index([supplierId])
  @@index([isActive])
  @@index([price])
  @@index([pricePerContainer])
  @@index([containerType])
  @@index([moq])
  @@index([stockContainers])
  @@index([originCountry])
  @@index([createdAt])
  @@map("products")
}

// ================================================================
// MODELO: Order (órdenes/cotizaciones)
// ================================================================

model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique @map("order_number") @db.VarChar(50)
  buyerId         Int         @map("buyer_id")
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(12, 2)
  currency        String      @db.VarChar(3)
  paymentTerms    String?     @map("payment_terms") @db.Text
  deliveryTerms   String?     @map("delivery_terms") @db.Text
  notes           String?     @db.Text
  
  // Información de shipping
  shippingAddress String?     @map("shipping_address") @db.Text
  paymentMethod   String?     @map("payment_method") @db.VarChar(100)
  
  // Datos de flete
  originPort      String?     @map("origin_port") @db.VarChar(255)
  destinationPort String?     @map("destination_port") @db.VarChar(255)
  containerType   String?     @map("container_type") @db.VarChar(50)
  estimatedShippingDate DateTime? @map("estimated_shipping_date")
  shippingCost    Decimal?    @db.Decimal(10, 2) @map("shipping_cost")
  shippingCarrier String?     @map("shipping_carrier") @db.VarChar(255)
  transitTime     Int?        @map("transit_time") // días
  incoterm        String?     @db.VarChar(10)
  
  expiresAt       DateTime?   @map("expires_at")
  confirmedAt     DateTime?   @map("confirmed_at")
  shippedAt       DateTime?   @map("shipped_at")
  deliveredAt     DateTime?   @map("delivered_at")
  cancelledAt     DateTime?   @map("cancelled_at")
  cancellationReason String? @map("cancellation_reason") @db.Text
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relaciones
  buyer        User          @relation(fields: [buyerId], references: [id])
  orderDetails OrderDetail[]
  shippingQuotes ShippingQuote[]

  // Índices
  @@index([orderNumber])
  @@index([buyerId])
  @@index([status])
  @@index([totalAmount])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("orders")
}

// ================================================================
// MODELO: OrderDetail (detalles de orden por producto)
// ================================================================

model OrderDetail {
  id               Int     @id @default(autoincrement())
  orderId          Int     @map("order_id")
  productId        Int     @map("product_id")
  supplierId       Int     @map("supplier_id")
  quantity         Int
  unitPrice        Decimal @db.Decimal(10, 2)
  totalPrice       Decimal @db.Decimal(12, 2)
  currency         String  @db.VarChar(3)
  specifications   Json?
  notes            String? @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relaciones
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product  Product @relation(fields: [productId], references: [id])
  supplier User    @relation(fields: [supplierId], references: [id])

  // Índices
  @@index([orderId])
  @@index([productId])
  @@index([supplierId])
  @@index([totalPrice])
  @@map("order_details")
}

// ================================================================
// MODELO: ShippingQuote (cotizaciones de flete)
// ================================================================

model ShippingQuote {
  id              Int      @id @default(autoincrement())
  orderId         Int?     @map("order_id")
  userId          Int      @map("user_id")
  
  // Información de ruta
  originPort      String   @map("origin_port") @db.VarChar(255)
  destinationPort String   @map("destination_port") @db.VarChar(255)
  containerType   String   @map("container_type") @db.VarChar(50)
  containerCount  Int      @map("container_count") @default(1)
  
  // Información del transportista
  carrier         String   @db.VarChar(255)
  carrierCode     String   @map("carrier_code") @db.VarChar(50)
  serviceType     String   @map("service_type") @db.VarChar(100)
  
  // Costos y tiempos
  cost            Decimal  @db.Decimal(10, 2)
  currency        String   @db.VarChar(3)
  transitTime     Int      @map("transit_time") // días
  
  // Fechas
  estimatedDeparture DateTime @map("estimated_departure")
  estimatedArrival   DateTime @map("estimated_arrival")
  validUntil         DateTime @map("valid_until")
  
  // Incoterms y condiciones
  incoterm        String   @db.VarChar(10)
  conditions      String?  @db.Text
  
  // Estado
  isSelected      Boolean  @default(false) @map("is_selected")
  status          String   @default("PENDING") @db.VarChar(50)
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relaciones
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id])
  quote Quote? // Relación inversa con Quote

  // Índices
  @@index([orderId])
  @@index([userId])
  @@index([originPort])
  @@index([destinationPort])
  @@index([carrier])
  @@index([cost])
  @@index([validUntil])
  @@index([isSelected])
  @@map("shipping_quotes")
}

// ================================================================
// MODELO: Quote (cotizaciones/RFQs persistentes)
// ================================================================

model Quote {
  id                Int            @id @default(autoincrement())
  quoteNumber       String         @unique @map("quote_number") @db.VarChar(50)
  buyerId           Int            @map("buyer_id")
  supplierId        Int            @map("supplier_id")
  
  // Información del producto/RFQ
  productId         Int?           @map("product_id")
  productTitle      String         @map("product_title") @db.VarChar(255)
  containerQuantity Int            @map("container_quantity")
  containerType     String         @map("container_type") @db.VarChar(20)
  
  // Estado y seguimiento
  status            QuoteStatus    @default(PENDING)
  priority          String         @default("medium") @db.VarChar(20)
  
  // Información comercial
  unitPrice         Decimal?       @map("unit_price") @db.Decimal(12, 2)
  totalPrice        Decimal?       @map("total_price") @db.Decimal(12, 2)
  currency          String         @default("USD") @db.VarChar(3)
  incoterm          String?        @db.VarChar(10)
  
  // Términos y condiciones
  paymentTerms      String?        @map("payment_terms") @db.Text
  deliveryTerms     String?        @map("delivery_terms") @db.Text
  leadTime          Int?           @map("lead_time") // días
  minimumOrderQty   Int?           @map("minimum_order_qty")
  
  // Información adicional
  logisticsComments String?        @map("logistics_comments") @db.Text
  specialRequirements String?      @map("special_requirements") @db.Text
  supplierComments  String?        @map("supplier_comments") @db.Text
  
  // Archivo de orden de compra
  purchaseOrderFileName String?    @map("purchase_order_file_name") @db.VarChar(255)
  purchaseOrderFileUrl  String?    @map("purchase_order_file_url") @db.Text
  purchaseOrderFileSize Int?       @map("purchase_order_file_size")
  purchaseOrderFileType String?    @map("purchase_order_file_type") @db.VarChar(100)
  
  // Fechas importantes
  requestDate       DateTime       @default(now()) @map("request_date")
  responseDeadline  DateTime?      @map("response_deadline")
  quotedAt          DateTime?      @map("quoted_at")
  validUntil        DateTime?      @map("valid_until")
  acceptedAt        DateTime?      @map("accepted_at")
  expiredAt         DateTime?      @map("expired_at")
  
  // Información de flete
  freightQuoteId    Int?           @unique @map("freight_quote_id")
  estimatedValue    Decimal?       @map("estimated_value") @db.Decimal(12, 2)
  
  // Metadatos
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  // Relaciones
  buyer             User           @relation("QuoteBuyer", fields: [buyerId], references: [id])
  supplier          User           @relation("QuoteSupplier", fields: [supplierId], references: [id])
  product           Product?       @relation(fields: [productId], references: [id])
  freightQuote      ShippingQuote? @relation(fields: [freightQuoteId], references: [id])
  quoteItems        QuoteItem[]
  quoteDocuments    QuoteDocument[]
  quoteResponses    QuoteResponse[]
  quoteComments     QuoteComment[]
  paymentOrder      PaymentOrder?

  // Índices
  @@index([quoteNumber])
  @@index([buyerId])
  @@index([supplierId])
  @@index([productId])
  @@index([status])
  @@index([requestDate])
  @@index([validUntil])
  @@index([totalPrice])
  @@map("quotes")
}

// ================================================================
// MODELO: QuoteItem (items específicos de una cotización)
// ================================================================

model QuoteItem {
  id                Int     @id @default(autoincrement())
  quoteId           Int     @map("quote_id")
  productId         Int?    @map("product_id")
  
  // ✅ Información detallada del producto
  productTitle      String? @map("product_title") @db.VarChar(255)
  supplierName      String? @map("supplier_name") @db.VarChar(255)
  supplierId        Int?    @map("supplier_id")
  containerType     String? @map("container_type") @db.VarChar(20)
  incoterm          String? @map("incoterm") @db.VarChar(20)
  pricePerContainer Decimal? @map("price_per_container") @db.Decimal(12, 2)
  
  // ✅ Campos originales
  itemDescription   String  @map("item_description") @db.VarChar(255)
  quantity          Int
  unitPrice         Decimal @map("unit_price") @db.Decimal(10, 2)
  totalPrice        Decimal @map("total_price") @db.Decimal(12, 2)
  currency          String  @default("USD") @db.VarChar(3)
  specifications    Json?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relaciones
  quote    Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product  Product? @relation(fields: [productId], references: [id])

  // Índices
  @@index([quoteId])
  @@index([productId])
  @@index([productTitle])
  @@index([supplierId])
  @@map("quote_items")
}

// ================================================================
// MODELO: QuoteResponse (respuestas del proveedor)
// ================================================================

model QuoteResponse {
  id                  Int      @id @default(autoincrement())
  quoteId             Int      @map("quote_id")
  supplierId          Int      @map("supplier_id")
  responseType        String   @map("response_type") @db.VarChar(20) // "quote", "counter_offer", "rejection"
  
  // Cotización del proveedor
  unitPrice           Decimal? @map("unit_price") @db.Decimal(12, 2)
  totalPrice          Decimal? @map("total_price") @db.Decimal(12, 2)
  currency            String   @default("USD") @db.VarChar(3)
  
  // Términos comerciales
  deliveryTime        Int?     @map("delivery_time") // días
  paymentTerms        String?  @map("payment_terms") @db.Text
  validityPeriod      Int?     @map("validity_period") // días
  minimumOrderQty     Int?     @map("minimum_order_qty")
  
  // Comentarios y condiciones
  supplierComments    String?  @map("supplier_comments") @db.Text
  technicalSpecs      String?  @map("technical_specs") @db.Text
  specialConditions   String?  @map("special_conditions") @db.Text
  rejectionReason     String?  @map("rejection_reason") @db.Text
  
  // Estado y fechas
  status              String   @default("submitted") @db.VarChar(20)
  isCounterOffer      Boolean  @default(false) @map("is_counter_offer")
  responseDate        DateTime @default(now()) @map("response_date")
  validUntil          DateTime? @map("valid_until")
  
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relaciones
  quote    Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  supplier User  @relation("QuoteResponseSupplier", fields: [supplierId], references: [id])

  // Índices
  @@index([quoteId])
  @@index([supplierId])
  @@index([responseType])
  @@index([status])
  @@index([responseDate])
  @@map("quote_responses")
}

// ================================================================
// MODELO: QuoteDocument (documentos adjuntos a cotizaciones)
// ================================================================

model QuoteDocument {
  id           Int      @id @default(autoincrement())
  quoteId      Int      @map("quote_id")
  documentType String   @map("document_type") @db.VarChar(50)
  title        String   @db.VarChar(255)
  fileName     String   @map("file_name") @db.VarChar(255)
  fileUrl      String   @map("file_url") @db.VarChar(500)
  fileSize     Int?     @map("file_size") // bytes
  uploadedBy   Int      @map("uploaded_by")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")

  // Relaciones
  quote    Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  uploader User  @relation("QuoteDocumentUploader", fields: [uploadedBy], references: [id])

  // Índices
  @@index([quoteId])
  @@index([documentType])
  @@index([uploadedBy])
  @@map("quote_documents")
}

// ================================================================
// MODELO: CartItem (items en el carrito de compras)
// ================================================================

model CartItem {
  id                String    @id @default(cuid())
  userId            Int       @map("user_id")
  productId         Int       @map("product_id")
  containerType     String    @map("container_type") @db.VarChar(10)
  containerQuantity Int       @map("container_quantity")
  pricePerContainer Decimal   @map("price_per_container") @db.Decimal(12, 2)
  currency          String    @default("USD") @db.VarChar(3)
  incoterm          String    @db.VarChar(20)
  customPrice       Decimal?  @map("custom_price") @db.Decimal(12, 2)
  notes             String?   @db.Text
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relaciones
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Índices
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("cart_items")
}

// ================================================================
// ENUMS
// ================================================================

enum VerificationStatus {
  PENDING  @map("pending")
  VERIFIED @map("verified")
  REJECTED @map("rejected")

  @@map("verification_status")
}

enum UserType {
  BUYER    @map("buyer")
  SUPPLIER @map("supplier")
  BOTH     @map("both")

  @@map("user_type")
}

enum AuthAction {
  LOGIN           @map("login")
  LOGOUT          @map("logout")
  FAILED_LOGIN    @map("failed_login")
  TOKEN_REFRESH   @map("token_refresh")
  PASSWORD_CHANGE @map("password_change")

  @@map("auth_action")
}

enum OrderStatus {
  PENDING    @map("pending")
  CONFIRMED  @map("confirmed")
  PROCESSING @map("processing")
  SHIPPED    @map("shipped")
  DELIVERED  @map("delivered")
  CANCELLED  @map("cancelled")
  EXPIRED    @map("expired")

  @@map("order_status")
}

enum QuoteStatus {
  PENDING        @map("pending")
  DRAFT          @map("draft")
  SENT           @map("sent")
  QUOTED         @map("quoted")
  COUNTER_OFFER  @map("counter_offer")
  ACCEPTED       @map("accepted")
  REJECTED       @map("rejected")
  EXPIRED        @map("expired")
  CANCELLED      @map("cancelled")

  @@map("quote_status")
}

// ================================================================
// MODELO: QuoteComment (Historial de comentarios en cotizaciones)
// ================================================================
model QuoteComment {
  id        Int      @id @default(autoincrement())
  quoteId   Int      @map("quote_id")
  userId    Int      @map("user_id")
  userType  String   @map("user_type") @db.VarChar(20) // 'BUYER' o 'SUPPLIER'
  comment   String   @db.Text
  status    QuoteStatus // El estado al momento del comentario
  
  // Metadatos
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relaciones
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  user      User     @relation("QuoteComments", fields: [userId], references: [id])
  
  // Índices
  @@index([quoteId])
  @@index([userId])
  @@index([createdAt])
  @@map("quote_comments")
}

// ================================================================
// MODELO: PaymentOrder (Órdenes de pago)
// ================================================================
model PaymentOrder {
  id                Int      @id @default(autoincrement())
  orderNumber       String   @unique @map("order_number") @db.VarChar(50)
  quoteId           Int      @unique @map("quote_id")
  buyerId           Int      @map("buyer_id")
  
  // Información comercial
  totalAmount       Decimal  @map("total_amount") @db.Decimal(12, 2)
  currency          String   @default("USD") @db.VarChar(3)
  
  // Información de pago
  paymentMethod     String   @map("payment_method") @db.VarChar(50) // 'paypal', 'card', etc.
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  
  // Información de PayPal
  paypalPaymentId   String?  @map("paypal_payment_id") @db.VarChar(100)
  paypalPayerId     String?  @map("paypal_payer_id") @db.VarChar(100)
  paypalToken       String?  @map("paypal_token") @db.VarChar(100)
  
  // Fechas importantes
  createdAt         DateTime @default(now()) @map("created_at")
  paidAt            DateTime? @map("paid_at")
  expiresAt         DateTime @map("expires_at")
  
  // Relaciones
  quote             Quote    @relation(fields: [quoteId], references: [id])
  buyer             User     @relation("PaymentOrderBuyer", fields: [buyerId], references: [id])
  
  // Índices
  @@index([orderNumber])
  @@index([quoteId])
  @@index([buyerId])
  @@index([paymentStatus])
  @@map("payment_orders")
}

// ================================================================
// ENUMS ADICIONALES
// ================================================================
enum PaymentStatus {
  PENDING    @map("pending")
  PROCESSING @map("processing")
  COMPLETED  @map("completed")
  FAILED     @map("failed")
  CANCELLED  @map("cancelled")
  REFUNDED   @map("refunded")
  
  @@map("payment_status")
}
