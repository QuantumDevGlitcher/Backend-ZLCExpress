// ================================================================
// CONTROLADOR MY QUOTES - ZLCExpress  
// ================================================================
// Descripci√≥n: Controlador para integrar cotizaciones con frontend My Quotes
// Fecha: 2025-07-27

import { Request, Response } from 'express';
import MyQuotesService from '../services/myQuotesService';

/**
 * Obtener todas las cotizaciones para My Quotes
 * GET /api/my-quotes
 */
export const getMyQuotes = async (req: Request, res: Response) => {
  try {
    console.log('üì• MyQuotesController: Obteniendo cotizaciones para My Quotes');
    
    const userId = parseInt(req.headers['user-id'] as string) || 1; // Mock user ID
    
    const quotes = await MyQuotesService.getMyQuotes(userId);
    
    console.log(`‚úÖ MyQuotesController: ${quotes.length} cotizaciones obtenidas`);
    res.json({
      success: true,
      data: quotes,
      message: 'Cotizaciones obtenidas exitosamente'
    });

  } catch (error: any) {
    console.error('‚ùå MyQuotesController: Error obteniendo cotizaciones:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Error al obtener cotizaciones'
    });
  }
};

/**
 * Obtener estad√≠sticas para My Quotes
 * GET /api/my-quotes/stats
 */
export const getMyQuotesStats = async (req: Request, res: Response) => {
  try {
    console.log('üì• MyQuotesController: Obteniendo estad√≠sticas para My Quotes');
    
    const userId = parseInt(req.headers['user-id'] as string) || 1;
    
    const stats = await MyQuotesService.getMyQuotesStats(userId);
    
    console.log('‚úÖ MyQuotesController: Estad√≠sticas obtenidas');
    res.json({
      success: true,
      data: stats,
      message: 'Estad√≠sticas obtenidas exitosamente'
    });

  } catch (error: any) {
    console.error('‚ùå MyQuotesController: Error obteniendo estad√≠sticas:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Error al obtener estad√≠sticas'
    });
  }
};

/**
 * Aceptar una cotizaci√≥n desde My Quotes
 * POST /api/my-quotes/:id/accept
 */
export const acceptMyQuote = async (req: Request, res: Response) => {
  try {
    console.log('üì• MyQuotesController: Aceptando cotizaci√≥n desde My Quotes');
    
    const quoteId = req.params.id;
    const userId = parseInt(req.headers['user-id'] as string) || 1;
    
    // TODO: Implementar aceptaci√≥n de cotizaci√≥n
    res.status(501).json({
      success: false,
      message: 'Funcionalidad no implementada a√∫n'
    });

  } catch (error: any) {
    console.error('‚ùå MyQuotesController: Error aceptando cotizaci√≥n:', error);
    res.status(400).json({
      success: false,
      message: error.message || 'Error al aceptar cotizaci√≥n'
    });
  }
};

/**
 * Crear nueva cotizaci√≥n desde frontend
 * POST /api/my-quotes
 */
export const createMyQuote = async (req: Request, res: Response) => {
  try {
    console.log('üì• MyQuotesController: Creando cotizaci√≥n desde frontend');
    console.log('üìã Datos recibidos:', req.body);
    
    const userId = parseInt(req.headers['user-id'] as string) || 1;
    
    const quote = await MyQuotesService.createQuoteFromFrontend(userId, req.body);
    
    console.log('‚úÖ MyQuotesController: Cotizaci√≥n creada exitosamente');
    res.status(201).json({
      success: true,
      data: quote,
      message: 'Cotizaci√≥n creada exitosamente'
    });

  } catch (error: any) {
    console.error('‚ùå MyQuotesController: Error creando cotizaci√≥n:', error);
    res.status(400).json({
      success: false,
      message: error.message || 'Error al crear cotizaci√≥n'
    });
  }
};

/**
 * Sincronizar RFQs con base de datos
 * POST /api/my-quotes/sync
 */
export const syncRFQsToMyQuotes = async (req: Request, res: Response) => {
  try {
    console.log('üì• MyQuotesController: Sincronizando RFQs con base de datos');
    
    const userId = parseInt(req.headers['user-id'] as string) || 1;
    
    // TODO: Implementar sincronizaci√≥n
    res.status(501).json({
      success: false,
      message: 'Funcionalidad de sincronizaci√≥n no implementada a√∫n'
    });

  } catch (error: any) {
    console.error('‚ùå MyQuotesController: Error sincronizando RFQs:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Error sincronizando RFQs'
    });
  }
};

/**
 * Migrar RFQs espec√≠ficos a My Quotes
 * POST /api/my-quotes/migrate
 */
export const migrateRFQsToMyQuotes = async (req: Request, res: Response) => {
  try {
    console.log('üì• MyQuotesController: Migrando RFQs espec√≠ficos a My Quotes');
    
    const userId = parseInt(req.headers['user-id'] as string) || 1;
    const rfqs = req.body.rfqs || [];
    
    // TODO: Implementar migraci√≥n de RFQs
    res.status(501).json({
      success: false,
      message: 'Funcionalidad de migraci√≥n no implementada a√∫n'
    });

  } catch (error: any) {
    console.error('‚ùå MyQuotesController: Error migrando RFQs:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Error migrando RFQs'
    });
  }
};

/**
 * Endpoint de prueba para verificar conexi√≥n
 * GET /api/my-quotes/test
 */
export const testMyQuotes = async (req: Request, res: Response) => {
  try {
    console.log('üì• MyQuotesController: Endpoint de prueba');
    
    res.json({
      success: true,
      message: 'My Quotes service funcionando correctamente',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development'
    });

  } catch (error: any) {
    console.error('‚ùå MyQuotesController: Error en test:', error);
    res.status(500).json({
      success: false,
      message: 'Error en test de My Quotes'
    });
  }
};

export default {
  getMyQuotes,
  getMyQuotesStats,
  acceptMyQuote,
  createMyQuote,
  syncRFQsToMyQuotes,
  migrateRFQsToMyQuotes,
  testMyQuotes
};
